services:
  db:
    image: postgres:17.5-alpine3.22
    environment:
      POSTGRES_USER: cards
      POSTGRES_PASSWORD: cards
      POSTGRES_DB: cards
    # Expose the port to Windows hosts (optional but handy for DBeaver, VS Code, etc.)
    ports:
      - "0.0.0.0:5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

    # Health-check must escape the $ so the shell in the container sees it
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  redis:
    image: redis:8.0.2-alpine
    volumes:
      - redis_data:/data

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      DATABASE_URL: postgres+asyncpg://cards:cards@db:5432/cards
      CELERY_BROKER_URL: redis://redis:6379/0
    volumes:
      - ./backend:/app/backend            # hot-reload
    ports:
      - "0.0.0.0:8000:8000"
    depends_on:
      db:
        condition: service_healthy
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    environment:
      DATABASE_URL: postgres+asyncpg://cards:cards@db:5432/cards
      CELERY_BROKER_URL: redis://redis:6379/0
    depends_on:
      - redis
      - db

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile    # path above
    command: pnpm dev --port 3000        # redundancy OK
    environment:
      NEXT_TELEMETRY_DISABLED: "1"
      NODE_ENV: development
    volumes:
      - ./frontend:/app                  # live code
      - /app/node_modules                # anonymous volume keeps deps safe
    ports:
      - "6405:3000"                      # host:container
    depends_on:
      - backend

volumes:
  db_data:
  redis_data:
